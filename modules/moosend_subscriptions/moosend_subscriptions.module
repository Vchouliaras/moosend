<?php

/**
* @file
*
*  Provides basic functionality for Moosend Subscriptions.
*/

define('MOOSEND_SUBSCRIPTIONS_BLOCK_DISPLAY', 1);
define('MOOSEND_SUBSCRIPTIONS_PAGE_DISPLAY', 2);
define('MOOSEND_SUBSCRIPTIONS_BOTH_PAGE_BLOCK', 3);


/**
 * Implements hook_menu().
 */
function moosend_subscriptions_menu() {
  $items = array();
  foreach (moosend_subscriptions_load_multiple() as $subscription) {
    if (intval($subscription->mode) == MOOSEND_SUBSCRIPTIONS_PAGE_DISPLAY || intval($subscription->mode) == MOOSEND_SUBSCRIPTIONS_BOTH_PAGE_BLOCK) {
      $items[$subscription->settings['page_url']] = array(
        'title' => $subscription->name,
        'page callback' => 'moosend_subscriptions_form_page',
        'page arguments' => array($subscription->identifier()),
        'access callback' => 'user_access',
        'access arguments' => array('access moosend subcription forms pages'),
        'type' => MENU_SUGGESTED_ITEM,
      );
    }
  }
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function moosend_subscriptions_entity_info() {

    $info['moosend_subscriptions'] = array(
      //Human readable name
      'label' => t('Subscription Form'),
      //Table for storing entity data with hook_schema
      'base table' => 'moosend_subscriptions',
      'entity keys' => array(
        'id' => 'sub_id',
        'label' => 'name'
      ),
      'uri callback' => 'entity_class_uri',
      //This is the Default Entity Class
      // 'entity class' => 'Entity',
      'entity class' => 'MoosendSubscriptions',
      //Drupal Core implements the
      //'controller class' => 'DrupalDefaultEntityController'
      //Drupal Entity API contrib module implements
      //'controller class' => 'EntityAPIController',
      //'controller class' => 'EntityAPIControllerExportable'
      'controller class' => 'MoosendSubscriptionsController', // We extends this to ovveride the default URI method
      //The information below is used to extend the EntityDefaultUIController
      'admin ui' => array(
        'path' => 'admin/config/services/moosend/subscriptions',
        'controller class' => 'MoosendSubscriptionsUIController',
        'file' => 'includes/moosend_subscriptions.admin.inc'
        ),
      // 'bundles' => array(
      //   'subscriptions' => array(
      //     'label' => t('Moosend Subscriptions'),
      //   ),
      // ),
      //Specify some information to VideoEntityUIController where path is etc
      'module' => 'moosend_subscriptions',
      //Access callback to determine permissions
      //Make our entity Fieldable
      'fieldable' => FALSE,
      //Create some custom view modes
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
          ),
        ),
      //Levage views API
      //'views controller class' => 'EntityDefaultViewsController'
      'access callback' => 'moosend_subscriptions_access_callback',
    );

  return $info;
}


/**
 * Implements hook_permission().
 *
 */
function moosend_subscriptions_permission() {
  return array(
     'administer moosend subscriptions' =>  array(
       'title' => t('Administer Moosend Subscription forms'),
     ),
     'access moosend subcription forms pages' => array(
      'title' => t('Access Moosend subscription form Pages')
      )
  );
}


/**
 * Specify callback permissions
 *
 */
function moosend_subscriptions_access_callback($op, $subscriptions = NULL, $account = NULL) {
  if (moosend_initialize_api()) {
    if (user_access('administer moosend subscriptions', $account) && user_access('administer moosend', $account)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * [moosend_subcriptions_load_multiple description]
 * @param  array   $ids        [description]
 * @param  array   $conditions [description]
 * @param  boolean $reset      [description]
 * @return [type]              [description]
 *
 */
function moosend_subscriptions_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($ids)) {
    $ids = FALSE;
  }
  return entity_load('moosend_subscriptions', $ids, $conditions, $reset);
}


/**
 * [moosend_subscription_load_single description]
 * @param  [type]  $id         [description]
 * @param  array   $conditions [description]
 * @param  boolean $reset      [description]
 * @return [type]              [description]
 *
 */
function moosend_subscriptions_load($id, $conditions = array(), $reset = FALSE) {
  $subscription = moosend_subscriptions_load_multiple(array($id));
  if (!empty($subscription)) {
    return reset($subscription);
  }
  else{
    return FALSE;
  }
}


/**
 * Implements hook_block_info().
 *
 */
function moosend_subscriptions_block_info() {
  $blocks = array();
  $subscriptions = moosend_subscriptions_load_multiple();
  foreach ($subscriptions as $subscription) {
    switch ($subscription->mode) {
      case MOOSEND_SUBSCRIPTIONS_BLOCK_DISPLAY:
      case MOOSEND_SUBSCRIPTIONS_BOTH_PAGE_BLOCK:
        $blocks[$subscription->identifier()] = array(
          'info' => t('Moosend Subscription Form : @name', array('@name' => $subscription->label())),
          'cache' => DRUPAL_CACHE_PER_USER,
        );
        break;
      }
  }
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function moosend_subscriptions_block_view($delta = '') {
  $subscription = moosend_subscriptions_load($delta);
  if ($subscription) {
    $form = drupal_get_form('moosend_subscriptions_block_id_' . $subscription->sub_id . '_form', $subscription, 'is_a_block');
    $block = array(
      'subject' => $subscription->name,
      'content' => $form,
    );
  }
  return $block;
}


/**
 * Menu callback for Moosend Subscriptions form page.
 */
function moosend_subscriptions_form_page($id) {
  $subscription = moosend_subscriptions_load($id);
  return drupal_get_form('moosend_subscriptions_page_id_' . $id . '_form', $subscription, 'is_a_page');
}


/**
 * Implements hook_forms().
 */
function moosend_subscriptions_forms($form_id, $args) {
  $forms = array();
  if (strncmp($form_id, 'moosend_subscriptions_', 22) === 0) {
    if (isset($args[1]) && $args[1] == 'is_a_block') {
      $forms['moosend_subscriptions_block_id_' . $args[0]->sub_id . '_form'] = array(
        'callback' => 'moosend_subscriptions_form_factory',
      );
    }
    elseif (isset($args[1]) && $args[1] == 'is_a_page') {
     $forms['moosend_subscriptions_page_id_' . $args[0]->sub_id . '_form'] = array(
        'callback' => 'moosend_subscriptions_form_factory',
      );
    }
  }
  return $forms;
}


/**
 * Returns a subscription form for Moosend Lists
 */
function moosend_subscriptions_form_factory($form, &$form_state, $subscription, $mode) {
    global $conf;

    $wrapper = 'moosend_form_' . $subscription->sub_id;
    $form['moosend'][$wrapper] = array(
        '#prefix' => '<div id="moosend-newsletter-' . $subscription->sub_id . '">',
        '#suffix' => '</div>',
    );

    if (!empty($subscription->settings['description'])) {
      $form['moosend'][$wrapper]['description'] = array(
        '#markup' => $subscription->settings['description']
      );
    }

    $form['moosend'][$wrapper]['email'] = array(
        '#type' => 'textfield',
        '#title' => t('Email Address'),
        '#size' => 35,
        '#required' => TRUE,
      );

    $form['moosend'][$wrapper]['custom_fields'] = array('#tree' => TRUE);
    $form['moosend'][$wrapper]['custom_fields'][] = moosend_fields_to_drupal_elements($subscription->settings['custom_fields']);

    $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#weight' => 10,
    '#value' => t('Submit'),
  );
  return $form;
}


/**
 * Validation handler for moosend_subscriptions_form_factory().
 */
function moosend_subscriptions_form_factory_validate($form, &$form_state) {
  if ($form_state['values']['email'] && !valid_email_address($form_state['values']['email'])) {
    form_set_error('mail', t('The e-mail address you specified is not valid.'));
  }
}

/**
 * Submit handler moosend_subscriptions_form_factory().
 */
function moosend_subscriptions_form_factory_submit($form, &$form_state) {
  $subscriptions = reset($form_state['build_info']['args']);
  $list_id = $subscriptions->list;

  if (user_is_logged_in()) {
    global $user;
    $name = ucfirst($user->name);
  }
  else{
    $name = '';
  }

  $email = $form_state['values']['email'];
  $custom_fields = array_filter($form_state['values']['custom_fields'][0]);

  $status =  moosend_subscribe_member($list_id, $email, $name, $custom_fields);
  if ($status) {
    if (strlen($subscriptions->settings['confirm_message'])) {
      drupal_set_message(t('@message', array('@message', $subscriptions->settings['confirm_message'])));
    }
    if (!empty($subscriptions->settings['redirect_page'])) {
      $form_state['redirect'] = $subscriptions->settings['redirect_page'];
    }
  }
  else{
    drupal_set_message(t('There was a problem with your newsletter signup.'), 'warning');
  }
}
