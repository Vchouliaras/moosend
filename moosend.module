<?php

/**
 * @file
 *
 * Moosend Module
 */

define('MOOSEND_CRON_QUEUE', 'moosend');
define('MOOSEND_PAGER', 15);
define('MOOSEND_NUMBER_FIELD', 0);
define('MOOSEND_TEXT_FIELD', 1);
define('MOOSEND_DATETIME_FIELD', 2);
define('MOOSEND_DROPDOWN_FIELD', 3);
define('MOOSEND_CHECKBOX_FIELD', 5);


/**
 *  Implements hook_libraries_info().
 */
function moosend_libraries_info() {
  $libraries['moosend'] = array(
    'name' => 'Moosend API',
    'vendor url' => 'http://moosend.com/api',
    'download url' => 'https://github.com/moosend/phpwrapper/archive/master.zip',
    'path' => 'src/moosend',
    'version' => 2,
    'files' => array(
      'php' => array(
        'MoosendApi.php' => array(),
        'Models/SubscriberParams.php',
        'Models/CampaignParams.php',
      )
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function moosend_menu() {
  $items = array();
  $items['admin/config/services/moosend'] = array(
    'title' => 'Moosend',
    'description' => 'Manage Moosend Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moosend_admin_configuration'),
    'access arguments' => array('administer moosend'),
    'file' => 'includes/moosend.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/moosend/settings'] = array(
    'title' => 'Moosend Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function moosend_permission() {
  return array(
    'administer moosend' => array(
      'title' => t('Administer Moosend'),
      'description' => t('Administer Moosend configuration options'),
    ),
  );
}

module_load_include('inc', 'moosend', 'wrapper/moosend.list');
module_load_include('inc', 'moosend', 'wrapper/moosend.segment');
module_load_include('inc', 'moosend', 'wrapper/moosend.subscriber');
module_load_include('inc', 'moosend', 'wrapper/moosend.campaign');

/**
 * Initialize Moosend Api
 *
 * @return object moosend_api
 */
function moosend_initialize_api() {
  $moosend_api = &drupal_static(__FUNCTION__);
  if (isset($moosend_api) ) {
    return $moosend_api;
  }

  $library = libraries_load('moosend');

  if ( empty($library['installed']) || !$library['installed'] ) {
    watchdog('moosend', 'Failed to load Moosend PHP Wrapper. Please refer to README.txt',
        NULL, WATCHDOG_ERROR);
    return FALSE;
  }

  if (!empty(variable_get('moosend_api_key'))) {
    try {
      $moosend_api = new moosend\MoosendApi(variable_get('moosend_api_key'));
    } catch (Exception $e) {
       watchdog('moosend', 'An error occurred initializing Moosend Api. "%message"', array(
      '%message' => $e->getMessage()),
      WATCHDOG_ERROR);

     return FALSE;
    }
  }

  return $moosend_api;
}



/**
 * [moosend_add_to_cron_queue description]
 * @param  [type] $function [description]
 * @param  [type] $args     [description]
 * @return [type]           [description]
 */
function moosend_add_to_cron_queue($function, $args) {
  $queue = DrupalQueue::get(MOOSEND_CRON_QUEUE);
  $queue->createQueue();
  return $queue->createItem(array(
    'function' => $function,
    'args' => $args,
  ));
}


/**
 * Implements hook_cron().
 */
function moosend_cron() {
  $queue = DrupalQueue::get(MOOSEND_CRON_QUEUE);
  $queue_count = $queue->numberOfItems();
  if ($queue_count > 0) {
    $batch_limit = 200;
    $batch_size = ($queue_count < $batch_limit) ? $queue_count : $batch_limit;
    $count = 0;
    while ($count < $batch_size) {
      $got_item = $queue->claimItem();
      if ($got_item !== FALSE) {
        call_user_func_array($item->data['function'], $item->data['args']);
        $queue->deleteItem($item);
      }
      $count++;
    }
  }
}


/**
 * Transform Moosend form elements to Drupal elements.
 *
 * @param array $fields
 *
 * @return array
 */
function moosend_fields_to_drupal_elements($fields) {

  $elements = array();
  if (!empty($fields) && count($fields) > 0) {
    foreach ($fields as $key => $field) {
      $elements[$key] = array(
        '#title' => t('@name', array('@name' => $field->Name)),
        '#required' => isset($field->IsRequired) ? $field->IsRequired : FALSE,
      );
      switch ($field->Type) {
        case MOOSEND_TEXT_FIELD:
        case MOOSEND_NUMBER_FIELD:
        case MOOSEND_DATETIME_FIELD:
          $elements[$key] +=  array(
            '#type' => 'textfield',
            '#size' => 35,
            '#maxlength' => 128,
            );
          break;
        case MOOSEND_DROPDOWN_FIELD:
           $options = array();
           $elements[$key] +=  array(
              '#type' => 'select'
            );
            if (!empty($field->Context)) {
              preg_match_all('/\<value\>[a-zA-Z]*\d\<\/value\>/i', $field->Context, $matches);
              if (!empty($matches[0])) {
               foreach ($matches[0] as $name => $value) {
                  $tmp = substr($value, 7); //<value>
                  $length = strlen($tmp) - 8; // </value>
                  $options[] = substr($tmp, 0, $length);
                 }
              }
              $elements[$key] +=  array(
                '#options' => drupal_map_assoc($options),
                '#default_value' => array($options[0]),
              );
            }
          break;
        case MOOSEND_CHECKBOX_FIELD:
            $elements[$key] +=  array(
              '#type' => 'checkbox'
            );
          break;
      }
    }
  }
  return $elements;
}


/**
 * [_moosend_parse_date description]
 * @param  [type] $date [description]
 * @return [type]       [description]
 */
function _moosend_parse_date($date) {
  if (!empty($date)) {
    $date = preg_match('/\d+\+\d+/', $date, $matches);
    $date_parts = explode('+', $matches[0]);

    // convert to seconds
    $timestamp = round($date_parts[0] / 1000 ,0);

   return new DateTime('@' . $timestamp);
  }
}

// vasilis
// vasilis100
// moosend
// CaE9kcCua0Zu
