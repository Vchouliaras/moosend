<?php


// vasilis.chouliaras+moosend@gmail.com = email
// vasilis.chouliaras+moosend = pass
// vasilismoosend = domain

define('NUMBER_FIELD', 0);
define('TEXT_FIELD', 1);
define('DATETIME_FIELD', 2);
define('DROPDOWN_FIELD', 3);
define('CHECKBOX_FIELD', 5);


/**
 *  Implements hook_libraries_info().
 *
 */
function moosend_libraries_info() {
  $libraries['moosend'] = array(
    'name' => 'Moosend API',
    'vendor url' => 'http://moosend.com/api',
    'download url' => 'https://github.com/moosend/phpwrapper/archive/master.zip',
    'path' => 'src/moosend',
    'version arguments' => array(
      'file' => 'composer.json',
      'pattern' => '/\"version": \"((\d+)\.(\d+)\.(\d+))\",/',
    ),
    'files' => array(
      'php' => array(
        'MoosendApi.php' => array(),
        'Models/SubscriberParams.php',
        'Models/CampaignParams.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 *
 */
function moosend_menu() {

  $items = array();

  $items['admin/config/services/moosend'] = array(
    'title' => 'Moosend',
    'description' => 'Manage Moosend Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moosend_admin_configuration'),
    'access arguments' => array('administer moosend'),
    'file' => 'includes/moosend.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/moosend/settings'] = array(
    'title' => 'Moosend Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  return $items;
}



/**
 * Implements hook_permission().
 *
 */
function moosend_permission() {
  return array(
    'administer moosend' => array(
      'title' => t('Administer Moosend'),
      'description' => t('Administer Moosend configuration options'),
    ),
  );
}


/**
 * Initialize Moosend Api
 *
 * @return object moosend_api
 *
 */
function initialize_moosend_api(){
  $moosend_api = &drupal_static(__FUNCTION__);

  if (isset($moosend_api) ) {
    return $moosend_api;
  }

  $library = libraries_load('moosend');
  if ( empty($library['installed']) || !$library['installed'] ) {
    watchdog('moosend', t('Failed to load Moosend PHP Wrapper. Please refer to README.txt')
      , NULL, WATCHDOG_ERROR);
    return FALSE;
  }

  try {
    $moosend_api = new moosend\MoosendApi(variable_get('moosend_api_key',''));
  } catch (Exception $e) {
     watchdog('moosend', 'An error occurred initializing Moosend Api. "%message"', array(
    '%message' => $e->getMessage()),
      WATCHDOG_ERROR);
     return FALSE;
  }

  return $moosend_api;
}



// LIST API----------------------------------------------------------------------

/**
 * Get all Active Lists
 *
 * @param  integer $page
 *
 * @param  integer $page_size
 *
 *
 * @param  boolean $cache
 *  Set cache to determine how to retrieve data
 *
 * @return array
 *  An array of all Moosend Lists
 */
// function moosend_get_active_lists($page = 1, $page_size = 10, $cache = TRUE) {
//   $lists = array();

//   if ($cache) {
//     if (!empty(cache_get('lists', 'cache_moosend'))) {
//       $lists = cache_get('lists', 'cache_moosend')->data;

//       return $lists;
//     } else{
//       moosend_get_active_lists($page, $page_size, FALSE); //Recursive
//     }
//   }

//   try {
//     cache_clear_all('list', 'cache_moosend', TRUE);
//     $moosendApi = initialize_moosend_api();
//     $activeMailingLists = $moosendApi->mailingLists->getActiveMailingLists($page, $page_size);
//     foreach ($activeMailingLists as $key => $activeMailingList) {
//       $lists[$key] = $activeMailingList->getID();
//     }
//     cache_set('lists', $lists, 'cache_moosend');
//   }
//   catch (Exception $e) {
//     watchdog('moosend','An error occurred. "%message"',
//       array('%message' => $e->getMessage()),
//       WATCHDOG_ERROR);
//   }
// }



/**
 * [moosend_get_active_lists_details description]
 * @param  array   $lists_ids [description]
 * @param  boolean $cache    [description]
 * @return [type]            [description]
 *
 */
// function moosend_get_active_lists_details($lists_ids = array(), $cache = TRUE){

//   $lists_ids = empty($lists_ids) ? moosend_get_active_lists(1, 10, $cache) : $lists_ids;

//   $details = array();

//   if ( $cache && is_array($lists_ids) ) {
//     foreach ($lists_ids as $key => $list_id) {
//       $cache = cache_get( 'list-' . $list_id, 'cache_moosend');
//       $details[$list_id] = $cache->data;
//       unset($lists_ids[$key]);
//     }
//    return $details;
//   }
//   // if($cache){
//   //   $details = moosend_get_active_lists_details($lists_ids, $cache);
//   //   if (empty($details)) {
//   //     moosend_get_active_lists_details($lists_ids, $cache);
//   //   }
//   // }

//   if ( is_array($lists_ids) && count($lists_ids) != 0 ) {
//     $moosendApi = initialize_moosend_api();
//     cache_clear_all('list' , 'cache_moosend' ,TRUE);
//     $last_list_id = NULL;
//     try {
//       foreach ($lists_ids as $key => $list_id) {
//         $last_list_id = $list_id;
//         $mailingListDetail = $moosendApi->mailingLists->getDetails($last_list_id);
//         $details[$last_list_id]['Name'] =  $mailingListDetail->getName();
//         $details[$last_list_id]['ActiveMemberCount'] =  $mailingListDetail->getActiveMemberCount();
//         $details[$last_list_id]['BouncedMemberCount'] =  $mailingListDetail->getBouncedMemberCount();
//         $details[$last_list_id]['RemovedMemberCount'] =  $mailingListDetail->getRemovedMemberCount();
//         $details[$last_list_id]['UnsubscribedMemberCount'] =  $mailingListDetail->getUnsubscribedMemberCount();
//         $details[$last_list_id]['Status'] =  $mailingListDetail->getStatus();
//         $details[$last_list_id]['CreatedOn'] =  $mailingListDetail->getCreatedOn();
//         $details[$last_list_id]['UpdatedOn'] =  $mailingListDetail->getUpdatedOn();
//         foreach ($mailingListDetail->getCustomFieldsDefinition() as $key => $field) {
//           $details[$last_list_id]['CustomFieldsDefinition'][$key] = (object)(array)$field; //Cast to stdClass object
//         }

//         cache_set('list-' . $last_list_id, $details[$last_list_id], 'cache_moosend');

//       }
//     }
//     catch (Exception $e) {
//       watchdog('moosend', 'An error occurred requesting data for List @list. "%message"', array(
//         '@list' => $last_list_id,
//         '%message' => $e->getMessage(),
//       ), WATCHDOG_ERROR);
//     }
//     return $details;
//   }
// }



function moosend_get_active_lists_details($page = 1, $page_size = 10, $list_id = NULL, $cache = TRUE){

  $lists_details = $lists_ids = array();

  if ($cache) {
     if (!empty(cache_get('lists', 'cache_moosend'))) {
      $lists_ids = cache_get('lists', 'cache_moosend') -> data;
      foreach ($lists_ids as $id) {
        $lists_details[$id] = cache_get('list-' . $id, 'cache_moosend')->data;
      }
      return !empty($list_id) ? $lists_details[$list_id] : $lists_details ;

     } else {
        moosend_get_active_lists_details($page, $page_size, $list_id, FALSE);
     }
  }

  try {
      $moosendApiKey = initialize_moosend_api();
      $activeMailingLists = $moosendApiKey->mailingLists->getActiveMailingLists($page, $page_size);
      if (!empty($activeMailingLists)) {
        foreach ($activeMailingLists as $activeMailingList) {
          $lists_details[$mailing_list_id]['ID'] = $mailing_list_id = $activeMailingList->getID();
          $lists_details[$mailing_list_id]['Name'] =  $activeMailingList->getName();
          $lists_details[$mailing_list_id]['ActiveMemberCount'] =  $activeMailingList->getActiveMemberCount();
          $lists_details[$mailing_list_id]['BouncedMemberCount'] =  $activeMailingList->getBouncedMemberCount();
          $lists_details[$mailing_list_id]['RemovedMemberCount'] =  $activeMailingList->getRemovedMemberCount();
          $lists_details[$mailing_list_id]['UnsubscribedMemberCount'] =  $activeMailingList->getUnsubscribedMemberCount();
          $lists_details[$mailing_list_id]['Status'] =  $activeMailingList->getStatus();
          $lists_details[$mailing_list_id]['CreatedOn'] =  $activeMailingList->getCreatedOn();
          $lists_details[$mailing_list_id]['UpdatedOn'] =  $activeMailingList->getUpdatedOn();
          foreach ($activeMailingList->getCustomFieldsDefinition() as $key => $field) {
            $lists_details[$mailing_list_id]['CustomFieldsDefinition'][$key] = (object)(array)$field; //Cast to stdClass object
          }
          cache_clear_all('list-' . $mailing_list_id, 'cache_moosend');
          cache_set('list-' . $mailing_list_id, $lists_details[$mailing_list_id], 'cache_moosend');
        }
        cache_clear_all('lists', 'cache_moosend');
        cache_set('lists', array_keys($lists_details), 'cache_moosend');
      }

    return !empty($list_id) ? $lists_details[$list_id] : $lists_details ;

  } catch (Exception $e) {
    watchdog('moosend', 'An error occurred retrieving details for Mailing Lists."%message"', array(
    '%message' => $e->getMessage()),
    WATCHDOG_ERROR);
  }
}



/**
 * [moosend_get_active_list_details description]
 * @param  [type]  $list_id [description]
 * @param  boolean $cache   [description]
 * @return [type]           [description]
 */
// function moosend_get_active_list_details($list_id, $cache = TRUE){
//   if(!empty($list_id)){
//     $active_list = moosend_get_active_lists_details(1, 10, $list_id, $cache);
//     return $active_list;
//   }
// }



/**
 * [moosend_get_active_list_custom_fields description]
 * @param  [type]  $list_id [description]
 * @param  boolean $cache   [description]
 * @return [type]           [description]
 */
function moosend_get_active_list_custom_fields($list_id, $cache = TRUE){
  $fields = array();
  $active_list = moosend_get_active_lists_details(1, 10, $list_id, $cache);
  if(isset($active_list['CustomFieldsDefinition'])){
    foreach ($active_list['CustomFieldsDefinition'] as $key => $field) {
      $fields[$field->Name] = (object)(array)$field; //Cast to stdClass object
    }
  }
  return $fields;
}









/**
 * [moosend_get_active_list_subscibers description]
 * @param  [type]  $list_id [description]
 * @param  [type]  $since   [description]
 * @param  boolean $cache   [description]
 * @return [type]           [description]
 *
 */
function moosend_get_active_list_subscibers($list_id, $since = NULL, $cache = FALSE ){

  $subscribers = array();
  $since = isset($since) ? new DateTime($since) : NULL;

  if ( !strlen($list_id) ) {
    $msg = t('An error occurred requesting subscribers. "List ID can not be blank"');
    watchdog('moosend',$msg, NULL, WATCHDOG_ERROR);
    return NULL;
  }

  if ($cache) {
    $subscribers = cache_get($list_id . '-subscribers','cache_moosend')->data;
    return $subscribers;
  }

  $moosendApi = initialize_moosend_api();

  try {
    $members = $moosendApi->mailingLists->getSubscribers($list_id,'Subscribed',$since);
    foreach ($members as $key => $subscriber) {
      $subscribers[$key]['name'] =  empty($subscriber->getName()) ?  t('Anonymous') : $subscriber->getName();
      $subscribers[$key]['email'] =  $subscriber->getEmail();
    }
    cache_set($list_id . '-subscribers', $subscribers, 'cache_moosend');
  }
  catch (Exception $e) {
    watchdog('moosend', 'An error occurred requesting subscribers for list @list. "%message"', array(
      '@list' => $list_id,
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
  }
  return $subscribers;
}



/**
 * [moosend_create_mailing_list description]
 * @param  [type] $name                         [description]
 * @param  [type] $confirmationPage             [description]
 * @param  [type] $redirectAfterUnsubscribePage [description]
 * @return [type]                               [description]
 */
function moosend_create_mailing_list($name,$confirmationPage = NULL, $redirectAfterUnsubscribePage = NULL){
   try {

    $moosendApiKey = initialize_moosend_api();

    $new_list_id = $moosendApiKey->mailingLists->create($name, $confirmationPage, $redirectAfterUnsubscribePage);
    watchdog('moosend', 'A new Mailing List with name "@name" was created',
        array('@name' => $name),
        WATCHDOG_NOTICE
      );
  }
  catch (Exception $e) {
      watchdog('moosend', 'An error occurred creating mailing list @name. "%message"', array(
        '@name' => $name,
        '%message' => $e->getMessage(),
      ), WATCHDOG_ERROR);
      return FALSE;
  }
  return $new_list_id;
}



/**
 * [moosend_delete_mailing_list description]
 * @param  [type] $list_id [description]
 * @return [type]          [description]
 */
function moosend_delete_mailing_list($list_id){
    $status = TRUE;
    try {
    $moosendApiKey = initialize_moosend_api();
    $moosendApiKey->mailingLists->delete($list_id);
    watchdog('moosend', 'Mailing List with ID "@ID" deleted',
        array('@ID' => $list_id),
        WATCHDOG_NOTICE
      );
  }
  catch (Exception $e) {
      watchdog('moosend', 'An error occurred deleting mailing list @ID. "%message"', array(
        '@ID' => $list_id,
        '%message' => $e->getMessage(),
      ), WATCHDOG_ERROR);
      $status = FALSE;
  }
  return $status;
}
















































// SUBSCRIBER API----------------------------------------------------------------------


/**
 * [moosend_is_a_subscriber description]
 * @param  [type]  $list_id [description]
 * @param  [type]  $email   [description]
 * @param  boolean $cache   [description]
 * @return [type]           [description]
 *
 */
function moosend_is_a_subscriber($list_id, $email, $cache = FALSE) {
  $subscribers = moosend_get_active_list_subscibers($list_id,NULL,$cache);
  $emails = array_column($subscribers,'email');/* >= PHP 5.5.0*/

  return in_array($email, $emails);
}





// function moosend_subscribe($list_id, $email, $merge_vars = NULL, $double_optin = FALSE, $confirm = TRUE, $format = 'html', $update_existing = TRUE, $replace_interests = TRUE) {
//   if (variable_get('mailchimp_cron', FALSE)) {
//     $args = array(
//       'list_id' => $list_id,
//       'email' => $email,
//       'merge_vars' => $merge_vars,
//       'format' => $format,
//       'double_optin' => $double_optin,
//       'update_existing' => $update_existing,
//       'replace_interests' => $replace_interests,
//       'confirm' => $confirm,
//     );
//     return mailchimp_addto_queue('mailchimp_subscribe_process', $args);
//   }

//   return mailchimp_subscribe_process($list_id, $email, $merge_vars, $double_optin, $format, $update_existing, $replace_interests, $confirm);
// }




/**
 * [moosend_add_subscriber description]
 * @param  [type] $list_id       [description]
 * @param  [type] $email         [description]
 * @param  [type] $name          [description]
 * @param  array  $custom_fields [description]
 * @return [type]                [description]
 */
function moosend_add_subscriber($list_id, $email, $name, $custom_fields = array() ) {
  $status = TRUE;
  try {
    $moosendApiKey = initialize_moosend_api();
    $member = moosend_subscriber_params($email, $name, $custom_fields);
    $moosendApiKey->subscribers->addSubscriber($list_id, $member);
    moosend_subscriber_clear_cache($list_id, $email); // Clear Subcriber Cache
    watchdog('moosend', '@email was subscribed to list @list.',
        array('@email' => $email, '@list' => $list_id),
        WATCHDOG_NOTICE
      );
  }
  catch (Exception $e) {
      $status = FALSE;
      watchdog('moosend', 'An error occurred subscribing @email to list @list. "%message"', array(
        '@email' => $email,
        '@list' => $list_id,
        '%message' => $e->getMessage(),
      ), WATCHDOG_ERROR);
  }
  return $status;
}


/**
 * [moosend_subscriber_params description]
 * @param  [type] $email         [description]
 * @param  [type] $name          [description]
 * @param  [type] $custom_fields [description]
 * @return [type]                [description]
 */
function moosend_subscriber_params($email, $name, $custom_fields) {
    $member = NULL;
    $custom_fields = !empty($custom_fields) ? $custom_fields : array();
    $member = new moosend\Models\SubscriberParams();
    $member->email = $email;
    $member->name= $name;
    $fields = array();
    if(!empty($custom_fields)) {
      foreach ($custom_fields as $key => $field) {
       $fields[] =  $key. '=' . $field; //Create fields with proper format
      }
    }
    $member->customFields = $fields;
    return $member;
}








/**
 * [moosend_unsubscribe_subscriber description]
 * @param  [type] $list_id     [description]
 * @param  [type] $email       [description]
 * @param  [type] $campaing_id [description]
 * @return [type]              [description]
 *
 */
function moosend_unsubscribe_subscriber($email, $campaing_id = NULL, $list_id) {
  $status = TRUE;
   try {
    $moosendApiKey = initialize_moosend_api();
    $moosendApiKey->subscribers->unsubscribe($email, $campaing_id, $list_id);
    moosend_subscriber_clear_cache($list_id, $email); // Clear Subcriber Cache
    watchdog('moosend', '@email was unsubscribe from list @list.',
        array('@email' => $email, '@list' => $list_id),
        WATCHDOG_NOTICE
      );
 }
catch (Exception $e) {
    $status = FALSE;
    watchdog('moosend', 'An error occurred unsubscribe @email from list @list. "%message"', array(
      '@email' => $email,
      '@list' => $list_id,
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
}
  return $status;
}



/**
 * [moosend_remove_subscriber description]
 * @param  [type] $list_id [description]
 * @param  [type] $email   [description]
 * @return [type]          [description]
 */
function moosend_remove_subscriber($list_id, $email) {
  $status = TRUE;
   try {
    $moosendApiKey = initialize_moosend_api();
    $moosendApiKey->subscribers->removeSubscriber($list_id,$email);
    watchdog('moosend', '@email was removed from list @list.',
        array('@email' => $email, '@list' => $list_id),
        WATCHDOG_NOTICE
      );
 }
catch (Exception $e) {
    $status = FALSE;
    watchdog('moosend', 'An error occurred removing @email from list @list. "%message"', array(
      '@email' => $email,
      '@list' => $list_id,
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
}
  return $status;
}






// $y = moosend_remove_subscriber('db69cf99-a902-4adb-b510-f34851df9fb9','peter@greek.com');
// kpr($y);



/**
 * Clear a moosend user memberinfo cache.
 *
 * @string $list_id
 * @string $email
 */
function moosend_subscriber_clear_cache($list_id, $email) {
  cache_clear_all($list_id.'-subscribers', 'cache_moosend');
}

/**
 *  Clear a moosend Lists cache
 *
 * @return [type] [description]
 */
function moosend_list_clear_cache(){
  //cache_clear_all('*','cache_moosend',TRUE);
}










/**
 * Convert Moosend form elements to Drupal Form API.
 *
 * @param array $mergevar
 *   The mailchimp-formatted form element to convert.
 *
 * @return array
 *   A properly formatted drupal form element.
 */
function moosend_fields_to_drupal_elements($fields) {

  $elements = array();
  if (!empty($fields) && count($fields) > 0) {
    foreach ($fields as $key => $field) {
      $elements[$key] = array(
        '#title' => t('@name', array('@name' => $field->Name)),
        '#required' => isset($field->IsRequired) ? $field->IsRequired : FALSE,
      );
      switch ($field->Type) {
        case TEXT_FIELD:
        case NUMBER_FIELD:
        case DATETIME_FIELD:
          $elements[$key] +=  array(
            '#type' => 'textfield',
            '#size' => 35,
            '#maxlength' => 128,
            );
          break;
        case DROPDOWN_FIELD:
           $options = array();
           $elements[$key] +=  array(
              '#type' => 'select'
            );
            if (!empty($field->Context)) {
              preg_match_all('/\<value\>[a-zA-Z]*\d\<\/value\>/i',$field->Context,$matches);
              if(!empty($matches[0])){
               foreach ($matches[0] as $name => $value) {
                  $tmp = substr($value,7); //<value>
                  $length = strlen($tmp) - 8; // </value>
                  $options[] = substr($tmp,0,$length);
                 }
              }
              $elements[$key] +=  array(
                '#options' => drupal_map_assoc($options),
                '#default_value' => array($options[0]),
              );
            }
          break;
        case CHECKBOX_FIELD:
            $elements[$key] +=  array(
              '#type' => 'checkbox'
            );
          break;
      }
    }
  }
  return $elements;
}



//SEGMENT API ------------------------------------------------

function moosend_get_list_segments($mailingListID){
  $segments = array();
  try {
    $moosendApiKey = initialize_moosend_api();
    $segmentsResponse = $moosendApiKey->segments->getSegments($mailingListID);
    foreach ($segmentsResponse as $key => $segment) {
      $segments[$key]['id'] = $segment->getID();
      $segments[$key]['name'] = $segment->getName();
    }
  }
  catch (Exception $e) {
    watchdog('moosend', 'An error occurred getting segments for list @list. "%message"', array(
      '@list' => $mailingListID,
      '%message' => $e->getMessage()),
      WATCHDOG_ERROR);
  }

  return $segments;
}



function moosend_get_list_segment_details($mailingListID, $segmentID){
  $segment_details = array();
  $criteria = array();
  try {
    $moosendApiKey = initialize_moosend_api();
    $segmentDetailsResponse = $moosendApiKey->segments->getDetails($mailingListID, $segmentID);
    $segment_details['id'] = $segmentDetailsResponse->getID();
    $segment_details['name'] = $segmentDetailsResponse->getName();
    foreach ($segmentDetailsResponse->getCriteria() as $key => $value) {
      $criteria[$key]['id'] = $value->getID();
      $criteria[$key]['segment_id'] = $value->getSegmentID();
      $criteria[$key]['field'] = $value->getField();
      $criteria[$key]['custom_field_id'] = $value->getCustomFieldID();
      $criteria[$key]['field'] = $value->getField();
      $criteria[$key]['comparer'] = $value->getComparer();
      $criteria[$key]['value'] = $value->getValue();
      $criteria[$key]['date_from'] = $value->getDateFrom();
      $criteria[$key]['date_to'] = $value->getDateTo();
      $criteria[$key]['properties'] = $value->getProperties();
    }
    $segment_details['criteria'] = $criteria;
    $segment_details['match_type'] = $segmentDetailsResponse->getMatchType();
    $segment_details['created_by'] = $segmentDetailsResponse->getCreatedBy();
    $segment_details['created_on'] = _moosend_parse_date($segmentDetailsResponse->getCreatedOn());
    $segment_details['updated_by'] = $segmentDetailsResponse->getUpdatedBy();
    $segment_details['updated_on'] = _moosend_parse_date($segmentDetailsResponse->getUpdatedOn());
  }
  catch (Exception $e) {
    watchdog('moosend', 'An error occurred getting segment details for ID@segmentID. "%message"', array(
      '@segmentID' => $segmentID,
      '%message' => $e->getMessage()),
      WATCHDOG_ERROR);
  }

  return $segment_details;
}



function moosend_get_list_segment_subscribers($mailingListID, $segmentID, $status = 'Subscribed', $page = 1, $pagesize = 500 ){
  $subscribers = NULL;
  try {
    $moosendApiKey = initialize_moosend_api();
    $subscribers = $moosendApiKey->segments->getSubscribers($mailingListID, $segmentID, $status, $page, $pagesize);
  } catch (Exception $e) {
    watchdog('moosend', 'An error occurred getting subscribers for Segment ID @segmentID. "%message"', array(
      '@segmentID' => $segmentID,
      '%message' => $e->getMessage()),
      WATCHDOG_ERROR);
  }
  return $subscribers;
}



function moosend_create_segment($mailingListID, $name, $matchType = 'All'){
  $createSegmentResponse = NULL;
  try {
    $moosendApiKey = initialize_moosend_api();
    $createSegmentResponse = $moosendApiKey->segments->create($mailingListID, $name, $matchType);
    watchdog('moosend', 'Segment  "@name" was created for list @list.',
      array('@name' => $name, '@list' => $mailingListID),
      WATCHDOG_NOTICE);
  }
  catch (Exception $e) {
    watchdog('moosend', 'An error occurred creating "@name" for list @list. "%message"', array(
      '@name' => $name,
      '@list' => $mailingListID,
      '%message' => $e->getMessage()),
      WATCHDOG_ERROR);
  }

  return $createSegmentResponse;
}



function moosend_update_segment($mailingListID, $name, $matchType){
  $status = TRUE;
  try {
    $moosendApiKey = initialize_moosend_api();
    $updateSegmentResponse = $moosendApiKey->segments->update($mailingListID, $name, $matchType);
    watchdog('moosend', 'Segment  "@name" was updated for list @list.',
      array('@name' => $name, '@list' => $mailingListID),
      WATCHDOG_NOTICE);
  }
  catch (Exception $e) {
    $status = FALSE;
    watchdog('moosend', 'An error occurred updating "@name" for list @list. "%message"', array(
      '@name' => $name,
      '@list' => $mailingListID,
      '%message' => $e->getMessage()),
      WATCHDOG_ERROR);
  }

  return $status;
}



function moosend_delete_segment($mailingListID, $segmentID){
  $status = TRUE;
  try {
    $moosendApiKey = initialize_moosend_api();
    $segments_ids = array();

    foreach (moosend_get_list_segments($mailingListID) as $segment) {
        $segments_ids[] = $segment['id'];
    }

    if(in_array($segmentID, $segments_ids)){
      $deleteSegmentResponse = $moosendApiKey->segments->delete($mailingListID, $segmentID);
      watchdog('moosend', 'Segment  "@id" was deleted for list @list.',
        array('@name' => $segmentID, '@list' => $mailingListID),
        WATCHDOG_NOTICE);
      }
  }
  catch (Exception $e) {
    $status = FALSE;
    watchdog('moosend', 'An error occurred deleting "@name" for list @list. "%message"', array(
      '@name' => $name,
      '@list' => $mailingListID,
      '%message' => $e->getMessage()),
      WATCHDOG_ERROR);
  }

  return $status;
}




function moosend_add_criteria_to_segment($mailingListID, $segmentID, $field, $comparer, $value, $dateFrom = NULL, $dateTo = NULL){
    $status = TRUE;
    $error_message = NULL;
    try {
      $moosendApiKey = initialize_moosend_api();
      $moosendApiKey->segments->addCriteria($mailingListID, $segmentID, $field, $comparer, $value, $dateFrom, $dateTo);

      watchdog('moosend', 'A new Criteria added to segment "@segment_id" for list @list.',
        array('@segment_id' => $segmentID, '@list' => $mailingListID),
        WATCHDOG_NOTICE);

    } catch (Exception $e) {
      $status = FALSE;

      watchdog('moosend', 'An error occurred adding criteria to segment "@segment_id" for list @list. "%message"', array(
      '@segment_id' => $segmentID,
      '@list' => $mailingListID,
      '%message' => $e->getMessage()),
      WATCHDOG_ERROR);
      $error_message = $e->getMessage();

    }

    return array('status' => $status,'error_message' => $error_message);
}




//Moosend Campaing API---------------------------------------------------------------------------


function moosend_get_campaings($page = 1, $page_size = 100, $sortBy = 'CreatedOn', $SortMethod = 'ASC', $cache = TRUE){
  $campaings_details = $campaings_ids = array();

  if ($cache) {
     if (!empty(cache_get('campaigns', 'cache_moosend'))) {
      $campaings_ids = cache_get('campaigns', 'cache_moosend') -> data;
      foreach ($campaings_ids as $id) {
        $campaings_details[$id] = cache_get('campaign-' . $id, 'cache_moosend')->data;
      }

      return $campaings_details;

     } else {
        moosend_get_campaings($page, $page_size, $sortBy, $SortMethod, FALSE);
     }
  }
  try {
      $moosendApiKey = initialize_moosend_api();
      $campaigns = $moosendApiKey->campaigns->getCampaigns($page, $page_size, $sortBy, $SortMethod);
      if (!empty($campaigns)) {
        cache_clear_all('campaign', 'cache_moosend', TRUE);
        foreach ($campaigns as $campaign) {
          $campaigns_details[$campaign_id]['ID'] = $campaign_id = $campaign->getID();
          $campaigns_details[$campaign_id]['Name'] = $campaign->getName();
          $campaigns_details[$campaign_id]['Subject'] = $campaign->getSubject();
          $campaigns_details[$campaign_id]['SiteName'] = $campaign->getSiteName();
          $campaigns_details[$campaign_id]['ConfirmationTo'] = $campaign->getConfirmationTo();
          $campaigns_details[$campaign_id]['CreatedOn'] =_moosend_parse_date($campaign->getCreatedOn());
          $campaigns_details[$campaign_id]['HoursToTest'] = $campaign->getABHoursToTest();
          $campaigns_details[$campaign_id]['ABCampaignType'] = $campaign->getABCampaignType();
          $campaigns_details[$campaign_id]['ABWinnerSelectionType'] = $campaign->getABWinnerSelectionType();
          $campaigns_details[$campaign_id]['Status'] = $campaign->getStatus();
          $campaigns_details[$campaign_id]['DeliveredOn'] = _moosend_parse_date($campaign->getDeliveredOn());
          $campaigns_details[$campaign_id]['ScheduledFor'] = _moosend_parse_date($campaign->getScheduledFor());
          $campaigns_details[$campaign_id]['ScheduledForTimezone'] = $campaign->getScheduledForTimezone();
          $campaigns_details[$campaign_id]['MailingListID'] = $campaign->getMailingListID();
          $campaigns_details[$campaign_id]['MailingListName'] = $campaign->getMailingListName();
          $campaigns_details[$campaign_id]['SegmentID'] = $campaign->getSegmentID();
          $campaigns_details[$campaign_id]['SegmentName'] = $campaign->getSegmentName();
          $campaigns_details[$campaign_id]['MailingListStatus'] = $campaign->getMailingListStatus();
          $campaigns_details[$campaign_id]['TotalSent'] = $campaign->getTotalSent();
          $campaigns_details[$campaign_id]['TotalOpens'] = $campaign->getTotalOpens();
          $campaigns_details[$campaign_id]['UniqueOpens'] = $campaign->getUniqueOpens();
          $campaigns_details[$campaign_id]['TotalBounces'] = $campaign->getTotalBounces();
          $campaigns_details[$campaign_id]['TotalForwards'] = $campaign->getTotalForwards();
          $campaigns_details[$campaign_id]['UniqueForwards'] = $campaign->getUniqueForwards();
          $campaigns_details[$campaign_id]['TotalLinkClicks'] = $campaign->getTotalLinkClicks();
          $campaigns_details[$campaign_id]['UniqueLinkClicks'] = $campaign->getUniqueLinkClicks();
          $campaigns_details[$campaign_id]['RecipientsCount'] = $campaign->getRecipientsCount();
          $campaigns_details[$campaign_id]['IsTransactional'] = $campaign->getIsTransactional();
          $campaigns_details[$campaign_id]['TotalComplaints'] = $campaign->getTotalComplaints();
          $campaigns_details[$campaign_id]['TotalUnsubscribes'] = $campaign->getTotalUnsubscribes();
          cache_set('campaign-' . $campaign_id, $campaigns_details[$campaign_id], 'cache_moosend');
        }
        cache_set('campaigns', array_keys($campaigns_details), 'cache_moosend');
      }

    return $campaigns_details;

  } catch (Exception $e) {
    watchdog('moosend', 'An error occurred retrieving details for Campaigns."%message"', array(
    '%message' => $e->getMessage()),
    WATCHDOG_ERROR);
  }
}


function moosend_get_active_senders(){
  $moosend_senders = array();
  try {
      $moosendApiKey = initialize_moosend_api();
      $senders = $moosendApiKey->campaigns->getAllSenders();
      foreach ($senders as $key => $sender) {
        $moosend_senders[$sender_id]['ID'] = $sender_id = $sender->getID();
        $moosend_senders[$sender_id]['Name'] = $sender->getName();
        $moosend_senders[$sender_id]['Email'] = $sender->getEmail();
        $moosend_senders[$sender_id]['Email'] = $sender->getEmail();
        $moosend_senders[$sender_id]['CreatedOn'] = _moosend_parse_date($sender->getCreatedOn());
        $moosend_senders[$sender_id]['IsEnabled'] = $sender->getIsEnabled();
        $moosend_senders[$sender_id]['SpfVerified'] = $sender->getSpfVerified();
        $moosend_senders[$sender_id]['DkimVerified'] = $sender->getDkimVerified();
        $moosend_senders[$sender_id]['DkimPublic'] = $sender->getDkimPublic();
      }
    } catch (Exception $e) {
      watchdog('moosend', 'An error occurred retrieving Moosend acount senders."%message"', array(
      '%message' => $e->getMessage()),
      WATCHDOG_ERROR);
    }
  return  $moosend_senders;
}



function moosend_delete_campaign($campaign_id) {
  $status = TRUE;
  try {
    $moosendApiKey = initialize_moosend_api();
    $campaign_deleted = $moosendApiKey->campaigns->delete($campaign_id);
    $campaigns = moosend_get_campaings();
      watchdog('moosend', 'Campaing "@Name" was deleted succefully.',
      array('@Name' => $campaigns[$campaign_id]['Name']),
      WATCHDOG_NOTICE);
  }
  catch (Exception $e) {
    $status = FALSE;
    watchdog('moosend', 'An error occurred deleting Campaing "@Name" . "%message"',
      array('@Name' => $campaigns[$campaign_id]['Name'],
      '%message' => $e->getMessage()),
      WATCHDOG_ERROR);
  }

  return $status;
}

// $draftParams = new CampaignParams();
// $draftParams->Name = 'draft name before';
// $draftParams->Subject = 'draft Subject before';
// $draftParams->SenderEmail = 'jtourkos@gmail.com';
// $draftParams->ReplyToEmail = 'jtourkos@hotmail.com';
// $draftParams->MailingListID = 'c673e294-a68a-46de-bdbf-e2ead42679c5';
// $draftParams->ConfirmationToEmail = 'jtourkos@hotmail.com';
// $draftParams->ReplyToEmail = 'jtourkos@gmail.com';
// $draftParams->WebLocation = 'https://github.com/moo
// send/dotnetwrapper/blob/master/Models/CampaignParams.cs';
// $draftID = $moosendApiGiannis->campaigns->createDraft($draftParams);
// var_dump($draftID);

// $params['Name'] = 'Vasilis Campaign2';
// $params['Subject'] = 'Vasilis Sub';
// $params['SenderEmail'] = 'vasilis.chouliaras@gmail.com';
// $params['ReplyToEmail'] = 'vasilis.chouliaras@gmail.com';
// $params['ConfirmationToEmail'] = 'vasilis.chouliaras@gmail.com';
// $params['MailingListID'] = 'db69cf99-a902-4adb-b510-f34851df9fb9';
// $params['WebLocation'] = 'https://github.com/moosend/dotnetwrapper/blob/master/Models/CampaignParams.cs';


function moosend_create_campaign_draft($params){
  $draft_id = '';
  if (!empty($params) && is_array($params)) {
    try{
      $moosend_api_key = initialize_moosend_api();
      $draftParams = new moosend\Models\CampaignParams();
      foreach ($params as $key => $value) {
        $draftParams->{$key} = $value;
      }
      $draft_id = $moosend_api_key->campaigns->createDraft($draftParams);
    }
    catch (Exception $e) {
    watchdog('moosend', 'An error occurred creating draft Campaing "@Name". "%message"',
      array('@Name' => $draftParams->Name,
      '%message' => $e->getMessage()),
      WATCHDOG_ERROR);
    }
    return $draft_id;
  }
}


function moosend_get_campaign_status_name($code){
  $status = NULL;
  switch ($code) {
    case CAMPAIGN_DRAFT:
      $status = t('Draft');
      break;
    case CAMPAIGN_READY_TO_SEND:
      $status = t('Ready to Send');
      break;
    case CAMPAIGN_SEND:
      $status = t('Sent');
      break;
    case CAMPAIGN_NOT_ENOUGH_CREDITS:
      $status = t('No Credits');
      break;
    case CAMPAIGN_SENDING:
      $status = t('Sending');
    break;
    case CAMPAIGN_SELECTING_WINNER:
      $status = t('Selecting Winner');
    break;
    case CAMPAIGN_ARCHIVED:
      $status = t('Archived');
    break;
  }
  return $status;
}






























































/**
 * Create Optgroup Select field
 * @param  boolean $append_mailing_list_fields [description]
 * @return [type]                              [description]
 */
function _moosend_criteria_fields($append_mailing_list_fields = TRUE){

  $criteria_fields = array( 'Custom Fields' =>
      drupal_map_assoc(array('DateAdded','RecipientName','RecipientEmail','CampaignsOpened','LinksClicked','CampaignName','LinkURL')),
    );

  if($append_mailing_list_fields){
    foreach (moosend_get_active_lists_details() as $key => $list) {
      foreach(moosend_get_active_list_custom_fields($key) as $field){
        $custom_fields[$field->ID] = $field->Name;
      }
      if(!empty($custom_fields)) {
        $criteria_fields['"'.$list['Name'] . '" Mailing List' ] = $custom_fields;
      }
    }
  }

  return $criteria_fields;
}




function _moosend_criteria_comparer($check_field = 'ALL'){

  if($check_field == 'DateAdded' ) {
    $comparer = array('Is','IsNot','IsBefore','IsAfter');
  }elseif($check_field == 'RecipientName' || $check_field == 'RecipientEmail'){

    $comparer = array('Is','IsNot','Contains','DoesNotContain','StartsWith','DoesNotStartWith','EndsWith','DoesNotEndWith','IsEmpty','IsNotEmpty');

  }elseif($check_field == 'CampaignName'){

    $comparer = array('Is','IsNot','Contains','DoesNotContain','StartsWith','DoesNotStartWith','EndsWith','DoesNotEndWith');

  }elseif($check_field == 'CampaignsOpened' ||  $check_field == 'LinksClicked'){

    $comparer = array('Is','IsNot','IsGreaterThan','IsGreaterThanOrEqualTo','IsLessThan','IsLessThanOrEqualTo');

  }elseif($check_field == 'LinkURL'){

    $comparer = array('Is','IsNot');

  }elseif($check_field == 'ALL') {

    $comparer = array(
    'Is','IsNot','Contains','DoesNotContain','StartsWith','DoesNotStartWith','EndsWith','DoesNotEndWith','IsGreaterThan','IsGreaterThanOrEqualTo',
    'IsLessThan','IsLessThanOrEqualTo','IsBefore','IsAfter','IsEmpty','IsNotEmpty','IsTrue','IsFalse'
    );

  }


  return drupal_map_assoc($comparer);
}


function _moosend_parse_date($date){
  if(!empty($date)) {
    $date = preg_match('/\d+\+\d+/', $date,$matches);
    $date_parts = explode('+', $matches[0]);

    // convert to seconds
    $timestamp = round( $date_parts[0] / 1000 );
    //$timezone = new DateTimeZone($date_parts[1]);

   return new DateTime('@'.$timestamp);
  }
}




/**
 * Implements hook_flush_caches().
 */
// function moosend_flush_caches() {
//   return array('cache_moosend');
// }


// vasilis
// vasilis100

// moosend
// CaE9kcCua0Zu
